<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hunter</groupId>
    <artifactId>HunterBlog</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>blog-framework</module>
        <module>blog-background</module>
        <module>blog-front</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <mybatis-plus>3.5.9</mybatis-plus>
        <spring-boot-dependencies>3.4.0</spring-boot-dependencies>
        <jwt>4.4.0</jwt>
        <qiniu>7.17.0</qiniu>
        <gson>2.11.0</gson>
        <jackson>2.18.1</jackson>
        <springdoc>2.8.4</springdoc>
    </properties>

    <!-- 依赖版本控制 -->
    <dependencyManagement>
        <dependencies>
            <!-- SpringBoot的依赖配置，统一和管理依赖版本 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <!-- spring-boot-dependencies本身不是一个库，是一个 依赖管理清单
                     它定义了大量常用依赖的版本，而不是具体的库文件 -->
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies}</version>
                <!-- 指定依赖类型 -->
                <type>pom</type>
                <!-- import 作用于POM包时允许将另一个POM文件中的依赖管理部分合并到当前项目的依赖管理中 -->
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
                <version>${mybatis-plus}</version>
            </dependency>
            <!-- v3.5.9 起，分页插件PaginationInnerInterceptor 已分离出来 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-jsqlparser</artifactId>
                <version>${mybatis-plus}</version>
            </dependency>

            <!-- JWT 依赖 -->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>${jwt}</version>
            </dependency>

            <!-- 序列化依赖 -->
            <!-- <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo}</version>
            </dependency> -->

            <!-- 图片通过七牛云管理 -->
            <dependency>
                <groupId>com.qiniu</groupId>
                <artifactId>qiniu-java-sdk</artifactId>
                <version>${qiniu}</version>
            </dependency>
            <!-- 七牛云依赖的gson，scope为runtime，在编译main目录下的Java类时，编译器无法找到gson库
             显式声明gson，以便编译器能够找到gson库
             -->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson}</version>
            </dependency>

            <!-- redis默认的JSON序列化器无法处理LocalDateTime类型的对象 -->
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson}</version>
            </dependency>

            <!-- 自动生成API文档 -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springdoc}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>3.4.1</version>
            </plugin>

            <!-- 编译项目的源码 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <!-- Springboot 3 加强了错误校验报错提示，@RequestParam 变成了不可省略注解。
                     可确保使用 -parameters 标志编译代码，从而使参数名称在运行时可用 -->
                    <parameters>true</parameters>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <!-- 构建项目时，将项目的依赖包以及自身的代码打包成一个单独的JAR文件，
                使得项目可以作为独立的单元进行分发和部署 -->
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.7.0</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <!-- 指定在打包阶段执行该插件任务，即mvn package assembly:single -->
                        <phase>package</phase>
                        <goals>
                            <!-- single任务表示只生成一个JAR文件 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 定义打包成的归档文件（JAR包）的配置 -->
                    <archive>
                        <!-- 定义了MANIFEST.MF文件的内容，这是JAR包的元数据文件 -->
                        <manifest>
                            <!-- 定义了JAR包的主类 -->
                            <mainClass>com.hunter.HunterBlogApplication</mainClass>
                        </manifest>
                        <manifest>
                            <mainClass>com.hunter.BlogBackgroundApplication</mainClass>
                        </manifest>
                    </archive>
                    <!-- 指定了输出目录 -->
                    <outputDirectory>${project.build.directory}/#maven-assembly-plugin</outputDirectory>
                    <descriptorRefs>
                        <!-- 将依赖包以及项目自身代码打包成一个JAR包，方便部署和运行 -->
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>